name: Deploy IIS Certificate Update

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main
      - develop

jobs:
  update-iis-cert:
    runs-on: ubuntu-latest # Or windows-latest if you prefer to run AZ CLI commands from Windows runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Ensure you have this secret configured

    - name: Execute IIS Certificate Update Script on VM SamuelKV
      run: |
        VM_NAME="SamuelKV"
        RESOURCE_GROUP="Samuel_KeyVault_RG"

        # Check if the PowerShell script file exists locally on the runner
        if [ ! -f "scripts/Update-IisCertBindings.ps1" ]; then
          echo "Error: PowerShell script not found at scripts/Update-IisCertBindings.ps1. Please ensure it's in the 'scripts' folder."
          exit 1
        fi

        # Read the PowerShell script content and base64 encode it for az vm run-command
        POWERSHELL_SCRIPT_CONTENT=$(cat "scripts/Update-IisCertBindings.ps1" | base64 -w 0)

        echo "Attempting to execute PowerShell script on VM: $VM_NAME in Resource Group: $RESOURCE_GROUP"

        # Execute the command and capture the full JSON output
        AZ_RUN_COMMAND_OUTPUT=$(az vm run-command invoke \
          --resource-group "$RESOURCE_GROUP" \
          --name "$VM_NAME" \
          --command-id RunPowerShellScript \
          --scripts "$POWERSHELL_SCRIPT_CONTENT" \
          --output json # Ensure output is JSON for jq processing
        )

        # Use jq to parse the JSON and extract both stdout and stderr
        # Check if 'value' array exists and has elements before accessing
        if echo "$AZ_RUN_COMMAND_OUTPUT" | jq -e '.value[0]' > /dev/null; then
          SCRIPT_STDOUT=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[0].message' 2>/dev/null || echo "")
          SCRIPT_STDERR=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[1].message' 2>/dev/null || echo "") # stderr is often at index 1

          echo "--- PowerShell Script Standard Output (STDOUT) ---"
          echo "$SCRIPT_STDOUT"
          echo "---------------------------------------------------"

          if [ -n "$SCRIPT_STDERR" ]; then
            echo "--- PowerShell Script Standard Error (STDERR) ---"
            echo "$SCRIPT_STDERR"
            echo "---------------------------------------------------"
          fi
        else
          echo "Error: Could not parse output from az vm run-command invoke. Full JSON output:"
          echo "$AZ_RUN_COMMAND_OUTPUT"
        fi

      env:
        IIS_SCRIPT_PATH: scripts/Update-IisCertBindings.ps1

    - name: Confirm Script Outcome
      run: |
        echo "Review the logs for 'Execute IIS Certificate Update Script on VM SamuelKV' step to confirm script outcome."
