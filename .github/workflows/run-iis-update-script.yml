- name: Execute IIS Certificate Update Script on VM ${{ steps.extract_params.outputs.VM_NAME }}
      id: run-script-on-vm # ID for this step.
      run: |
        VM_NAME="${{ steps.extract_params.outputs.VM_NAME }}"
        RESOURCE_GROUP="${{ steps.extract_params.outputs.RESOURCE_GROUP }}"
        POWERSHELL_SCRIPT_PATH="scripts/Update-IisCertBindings.ps1"

        echo "--- Script Pre-check ---"
        if [ ! -f "$POWERSHELL_SCRIPT_PATH" ]; then
          echo "Error: PowerShell script not found at $POWERSHELL_SCRIPT_PATH."
          echo "Please ensure it's in the 'scripts/' folder relative to your repository root."
          exit 1
        fi
        echo "PowerShell script found: $POWERSHELL_SCRIPT_PATH"
        echo "------------------------"
        echo ""

        echo "Attempting to execute PowerShell script on VM: $VM_NAME in Resource Group: $RESOURCE_GROUP"

        AZ_RUN_COMMAND_OUTPUT=$(az vm run-command invoke \
          --resource-group "$RESOURCE_GROUP" \
          --name "$VM_NAME" \
          --command-id RunPowerShellScript \
          --scripts "$(cat "$POWERSHELL_SCRIPT_PATH")" \
          --output json
        )

        echo ""
        echo "--- PowerShell Script Output from VM ---"

        LOCAL_STDOUT=""
        LOCAL_STDERR=""

        # Check if the overall command was successful and has expected output structure
        if echo "$AZ_RUN_COMMAND_OUTPUT" | jq -e '.value[0]' > /dev/null; then
            # Attempt to extract messages based on their 'code'
            # ComponentStatus/StdOut/succeeded for script's stdout
            LOCAL_STDOUT=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[] | select(.code == "ComponentStatus/StdOut/succeeded").message' 2>/dev/null || echo "")
            # ComponentStatus/StdErr/succeeded for script's stderr
            LOCAL_STDERR=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[] | select(.code == "ComponentStatus/StdErr/succeeded").message' 2>/dev/null || echo "")

            # Fallback logic for older Azure CLI versions or unusual outputs,
            # but the above two lines are the most critical for separation.
            # If both are empty, and there's still something in the raw output,
            # it means the `code` wasn't what we expected, so dump everything to stderr.
            if [ -z "$LOCAL_STDOUT" ] && [ -z "$LOCAL_STDERR" ] && [ -n "$AZ_RUN_COMMAND_OUTPUT" ]; then
              LOCAL_STDERR=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[].message' 2>/dev/null || echo "Unknown or unparseable output format from az vm run-command.")
            fi


            echo "--- Standard Output (STDOUT - Should be JSON) ---"
            echo "$LOCAL_STDOUT"
            echo "-------------------------------------------------"

            if [ -n "$LOCAL_STDERR" ]; then
              echo ""
              echo "--- Standard Error (STDERR) ---"
              echo "$LOCAL_STDERR"
              echo "-------------------------------"
            else
              echo "No Standard Error (STDERR) reported by script."
            fi
        else
            # This block executes if the JSON output from 'az vm run-command invoke' was unexpected or empty.
            echo "Error: Could not parse expected output from 'az vm run-command invoke'." -1>&2 # Redirect to stderr
            echo "This might indicate an issue with the command execution, network, or an unexpected JSON response format." -1>&2
            echo "Full JSON output received:" -1>&2
            echo "$AZ_RUN_COMMAND_OUTPUT" -1>&2 # Dump full output to stderr
            
            # Set stderr_content for email notification
            echo "stderr_content<<EOF_STDERR_ERROR" >> "$GITHUB_OUTPUT"
            echo "Error: Failed to invoke Azure VM run command or parse its output." >> "$GITHUB_OUTPUT"
            echo "$AZ_RUN_COMMAND_OUTPUT" >> "$GITHUB_OUTPUT"
            echo "EOF_STDERR_ERROR" >> "$GITHUB_OUTPUT"

            exit 1 # Fail this step, as we couldn't get proper output.
        fi
        echo "------------------------------"

        # Make STDOUT and STDERR content available as outputs of this step
        echo "stdout_content<<EOF_STDOUT" >> "$GITHUB_OUTPUT"
        echo "$LOCAL_STDOUT" >> "$GITHUB_OUTPUT"
        echo "EOF_STDOUT" >> "$GITHUB_OUTPUT"

        echo "stderr_content<<EOF_STDERR" >> "$GITHUB_OUTPUT"
        echo "$LOCAL_STDERR" >> "$GITHUB_OUTPUT"
        echo "EOF_STDERR" >> "$GITHUB_OUTPUT"

      env:
        IIS_SCRIPT_PATH: scripts/Update-IisCertBindings.ps1
