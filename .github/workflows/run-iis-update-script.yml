name: IIS Certificate Update (Scheduled & Manual)

on:
  schedule:
    # Runs every hour at 30 minutes past the hour. (UTC time)
    # Adjust '30 * * * *' to your preferred schedule.
    # For every 4 hours at 30 minutes past the hour: '30 */4 * * *'
    # For every 6 hours at 0 minutes past the hour: '0 */6 * * *'
    - cron: '30 * * * *'

  workflow_dispatch:
    inputs:
      # This input is only available when manually dispatching the workflow
      vm_params_glob:
        description: 'Glob pattern for VM parameters JSON files (e.g., bicep/Virtual-Machines/*-params.json)'
        required: false # Make it optional for manual runs, so the default scheduled behavior can apply
        default: 'bicep/Virtual-Machines/*.json' # Provide a default for manual trigger

jobs:
  # Job 1: Find all VM parameter files matching the specified glob pattern
  find-vm-param-files:
    runs-on: ubuntu-latest
    outputs:
      vm_param_files: ${{ steps.get_files.outputs.files_json }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Get VM Parameter Files
      id: get_files
      run: |
        # Determine the glob pattern based on the event that triggered the workflow
        # If it's a workflow_dispatch event, use the provided input.
        # Otherwise (e.g., scheduled run), use the default hardcoded pattern.
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Use the input value for manual runs
          GLOB_PATTERN="${{ github.event.inputs.vm_params_glob }}"
          if [ -z "$GLOB_PATTERN" ]; then
            # Fallback if input is empty, though 'default' should prevent this
            GLOB_PATTERN="bicep/Virtual-Machines/*.json"
            echo "Warning: No glob pattern provided for manual dispatch. Using default: $GLOB_PATTERN"
          fi
        else
          # Use the hardcoded pattern for scheduled runs
          GLOB_PATTERN="bicep/Virtual-Machines/*.json" # Adjust this if your files have a more specific naming convention
        fi

        echo "Searching for parameter files matching: $GLOB_PATTERN"

        FILES_JSON=$(find "$(dirname "$GLOB_PATTERN")" -maxdepth 1 -name "$(basename "$GLOB_PATTERN")" -type f -print0 | jq -R -s 'split("\u0000") | map(select(length > 0))')

        if [ "$FILES_JSON" == "[]" ]; then
          echo "No files found matching '$GLOB_PATTERN'. Exiting."
          exit 0 # Exit successfully if no files are found to avoid failing the workflow unnecessarily
        fi

        echo "Found files: $FILES_JSON"
        echo "files_json=$FILES_JSON" >> "$GITHUB_OUTPUT"
      shell: bash

  # Job 2: Run the IIS certificate update for each VM parameter file found
  update-iis-cert:
    if: needs.find-vm-param-files.outputs.vm_param_files != '[]'
    needs: find-vm-param-files
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        vm_params_file: ${{ fromJson(needs.find-vm-param-files.outputs.vm_param_files) }}

    environment:
      name: Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract VM Name and Resource Group from Parameter File
      id: extract_params
      run: |
        PARAM_FILE="${{ matrix.vm_params_file }}"
        echo "Reading parameters from: $PARAM_FILE"

        if [ ! -f "$PARAM_FILE" ]; then
          echo "Error: Parameter file not found at $PARAM_FILE."
          exit 1
        fi

        VM_NAME=$(jq -r '.parameters.vmName.value' "$PARAM_FILE")
        if [ -z "$VM_NAME" ]; then
          echo "Error: 'vmName' not found in $PARAM_FILE or is empty."
          exit 1
        fi

        RESOURCE_GROUP=$(jq -r '.targetResourceGroup' "$PARAM_FILE")
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "Error: 'targetResourceGroup' not found in $PARAM_FILE or is empty."
          exit 1
        fi

        echo "Extracted VM Name: $VM_NAME"
        echo "Extracted Resource Group: $RESOURCE_GROUP"

        echo "VM_NAME=$VM_NAME" >> "$GITHUB_OUTPUT"
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Execute IIS Certificate Update Script on VM ${{ steps.extract_params.outputs.VM_NAME }}
      id: run-script-on-vm
      run: |
        VM_NAME="${{ steps.extract_params.outputs.VM_NAME }}"
        RESOURCE_GROUP="${{ steps.extract_params.outputs.RESOURCE_GROUP }}"
        POWERSHELL_SCRIPT_PATH="scripts/Update-IisCertBindings.ps1"

        echo "--- Script Pre-check ---"
        if [ ! -f "$POWERSHELL_SCRIPT_PATH" ]; then
          echo "Error: PowerShell script not found at $POWERSHELL_SCRIPT_PATH."
          echo "Please ensure it's in the '$POWERSHELL_SCRIPT_PATH' folder relative to your repository root."
          exit 1
        fi
        echo "PowerShell script found: $POWERSHELL_SCRIPT_PATH"
        echo "------------------------"
        echo ""

        echo "Attempting to execute PowerShell script on VM: $VM_NAME in Resource Group: $RESOURCE_GROUP"

        AZ_RUN_COMMAND_OUTPUT=$(az vm run-command invoke \
          --resource-group "$RESOURCE_GROUP" \
          --name "$VM_NAME" \
          --command-id RunPowerShellScript \
          --scripts "$(cat "$POWERSHELL_SCRIPT_PATH")" \
          --output json \
          --only-show-errors
        )

        echo ""
        echo "--- PowerShell Script Output from VM ---"

        if echo "$AZ_RUN_COMMAND_OUTPUT" | jq -e '.value[0]' > /dev/null; then
          SCRIPT_STDOUT=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[] | select(.code == "ComponentStatus/StdOut/succeeded").message' 2>/dev/null || echo "")
          SCRIPT_STDERR=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[] | select(.code == "ComponentStatus/StdErr/succeeded").message' 2>/dev/null || echo "")

          if [ -z "$SCRIPT_STDOUT" ] && [ -z "$SCRIPT_STDERR" ]; then
            SCRIPT_STDOUT=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[0].message' 2>/dev/null || echo "")
            SCRIPT_STDERR=$(echo "$AZ_RUN_COMMAND_OUTPUT" | jq -r '.value[1].message' 2>/dev/null || echo "")
          fi

          echo "--- Standard Output (STDOUT) ---"
          echo "$SCRIPT_STDOUT"
          echo "--------------------------------"

          if [ -n "$SCRIPT_STDERR" ]; then
            echo ""
            echo "--- Standard Error (STDERR) ---"
            echo "$SCRIPT_STDERR"
            echo "-------------------------------"
          else
            echo "No Standard Error (STDERR) reported."
          fi
        else
          echo "Error: Could not parse expected output from 'az vm run-command invoke'."
          echo "This might indicate an issue with the command execution or an unexpected response format."
          echo "Full JSON output received:"
          echo "$AZ_RUN_COMMAND_OUTPUT"
          exit 1
        fi
        echo "------------------------------"

      env:
        IIS_SCRIPT_PATH: scripts/Update-IisCertBindings.ps1

    - name: Final Confirmation Message for ${{ steps.extract_params.outputs.VM_NAME }}
      run: |
        echo "Review the logs for the 'Execute IIS Certificate Update Script on VM ${{ steps.extract_params.outputs.VM_NAME }}' step to confirm the PowerShell script's outcome."
        echo "Look for '--- Standard Output (STDOUT) ---' and '--- Standard Error (STDERR) ---' sections."
