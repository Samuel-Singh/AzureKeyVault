name: Deploy VM Key Vault Extension

on:
# push:
# branches:
# - main
# paths:
# - 'bicep/**' # Trigger if any bicep file (including param files) changes
  workflow_dispatch: # Allow manual triggering from GitHub UI

env:
  BICEP_FILE_PATH: bicep/vm-keyvault-extension.bicep

jobs:
  deploy:
    runs-on: ubuntu-22.04 # Use a specific Ubuntu LTS runner for stability

    strategy:
      fail-fast: false # This is CRITICAL. It ensures that if one job fails, others still run.
      matrix:
        # List all your VM parameter files here.
        # Ensure these paths are correct relative to your repository root.
        vm_params_file:
          - 'bicep/Virtual-Machines/SamuelKV-VM-params.json'
          # Add more files as you create them:
          # - 'bicep/vm3-params.json'
          # - 'bicep/another-vm-params.json'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Azure Login
        uses: azure/login@v2 # Action to log into Azure using a Service Principal
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # GitHub Secret containing your Service Principal JSON

      - name: Read Parameter File Content
        id: read_params_file
        run: |
          # Read the entire content of the parameter file into a string
          # And make it available as an output.
          PARAMS_CONTENT=$(cat "${{ matrix.vm_params_file }}")
          echo "PARAMS_CONTENT=$PARAMS_CONTENT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Extract Parameters for Deployment
        id: extract_params
        run: |
          # Parse the PARAMS_CONTENT string as JSON, then extract the 'parameters' object
          # and convert it back to a compact JSON string.
          # This ensures that the JSON is handled correctly by GitHub Actions expressions.
          FULL_PARAMS_OBJECT='${{ fromJson(steps.read_params_file.outputs.PARAMS_CONTENT) }}'
          VM_NAME="${{ fromJson(FULL_PARAMS_OBJECT.parameters.vmName).value }}"
          RESOURCE_GROUP="${{ fromJson(FULL_PARAMS_OBJECT.parameters.resourceGroupName).value }}"
          
          # Extract the inner 'parameters' object from the full JSON and stringify it
          # This is the precise JSON structure expected by 'parameters' input for inline JSON.
          INLINE_PARAMS_JSON=$(echo "${{ fromJson(FULL_PARAMS_OBJECT).parameters }}" | jq -c '.')
          
          echo "VM_NAME=$VM_NAME" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "INLINE_PARAMS_JSON=$INLINE_PARAMS_JSON" >> $GITHUB_OUTPUT
        shell: bash # Use bash as we're performing shell operations and then piping to jq

      - name: Deploy VM Key Vault Extension for ${{ steps.extract_params.outputs.VM_NAME }}
        uses: azure/arm-deploy@v2 # Using @v2 is generally preferred for the latest features/fixes
        id: arm_deploy # Add an ID to this step to check its outcome
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID || fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          resourceGroupName: ${{ steps.extract_params.outputs.RESOURCE_GROUP }} # Dynamic Resource Group
          template: bicep/vm-keyvault-extension.bicep
          parameters: ${{ steps.extract_params.outputs.INLINE_PARAMS_JSON }} # Pass the correctly formatted inline JSON
          deploymentName: deploy-kv-ext-${{ steps.extract_params.outputs.VM_NAME }}-${{ github.run_id }}
          failOnStdErr: false # Keep this to explicitly ignore non-critical stderr output
          
      - name: Check Deployment Result for ${{ steps.extract_params.outputs.VM_NAME }}
        if: ${{ steps.arm_deploy.outcome != 'success' }} # This step runs ONLY if the deployment step did NOT succeed
        run: |
          echo "‚ùå Deployment for VM: ${{ steps.extract_params.outputs.VM_NAME }} in RG: ${{ steps.extract_params.outputs.RESOURCE_GROUP }} FAILED. Continuing with other deployments."
          # Optionally, you could add more detailed logging here, e.g., from the deployment output.
          # You can choose to fail the entire workflow here if you want to be stricter,
          # but the current setup allows other matrix jobs to complete.
        shell: bash
