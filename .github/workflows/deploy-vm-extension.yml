name: Deploy Azure Key Vault Extension

on:
#  push:
#    branches:
#      - main
#    paths:
#      - 'bicep/**' # Trigger if any bicep file (including param files) changes
  workflow_dispatch: # Allow manual triggering from GitHub UI

env:
  BICEP_FILE_PATH: bicep/vm-keyvault-extension.bicep

jobs:
  deploy:
    runs-on: ubuntu-22.04 # Use a specific Ubuntu LTS runner for stability

    strategy:
      fail-fast: false # This is CRITICAL. It ensures that if one job fails, others still run.
      matrix:
        # List all your VM parameter files here.
        # Ensure these paths are correct relative to your repository root.
        vm_params_file:
          - 'bicep/Virtual-Machines/SamuelKV-VM-params.json'
          # Add more files as you create them:
          # - 'bicep/vm3-params.json'
          # - 'bicep/another-vm-params.json'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Azure Login
        uses: azure/login@v2 # Action to log into Azure using a Service Principal
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # GitHub Secret containing your Service Principal JSON

      - name: Extract Parameters from ${{ matrix.vm_params_file }}
        id: extract_params
        run: |
          VM_NAME=$(jq -r '.parameters.vmName.value' "${{ matrix.vm_params_file }}")
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroupName.value' "${{ matrix.vm_params_file }}")
          
          echo "VM_NAME=$VM_NAME" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        shell: bash

      - name: Deploy VM Key Vault Extension for ${{ steps.extract_params.outputs.VM_NAME }}
        run: |
          az deployment group create \
            --resource-group ${{ steps.extract_params.outputs.RESOURCE_GROUP }} \
            --template-file ${{ env.BICEP_FILE_PATH }} \
            --parameters @${{ matrix.vm_params_file }} \
            --name deploy-kv-ext-${{ steps.extract_params.outputs.VM_NAME }}-${{ github.run_id }} \
            --query properties.provisioningState # Optional: get the provisioning state
        shell: bash
          
      - name: Check Deployment Result for ${{ steps.extract_params.outputs.VM_NAME }}
        if: ${{ steps.arm_deploy.outcome != 'success' }} # This step runs ONLY if the deployment step did NOT succeed
        run: |
          echo "‚ùå Deployment for VM: ${{ steps.extract_params.outputs.VM_NAME }} in RG: ${{ steps.extract_params.outputs.RESOURCE_GROUP }} FAILED. Continuing with other deployments."
          # Optionally, you could add more detailed logging here, e.g., from the deployment output.
          # You can choose to fail the entire workflow here if you want to be stricter,
          # but the current setup allows other matrix jobs to complete.
        shell: bash
